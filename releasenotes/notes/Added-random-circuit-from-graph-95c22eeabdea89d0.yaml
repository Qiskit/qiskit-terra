---
features_circuits:
  - |
    The function :func:`~qiskit.circuit.random.utils.random_circuit_from_graph` generates a random circuit that 
    induces the same interaction graph as the interaction graph specified by `interaction_graph`.

    The probability of randomly drawing an edge from the interaction graph as a two-qubit gate can be set by the 
    user in the weight attribute of an edge in the input interaction graph. If the user does not set the probability, 
    each edge is drawn uniformly, i.e. each two-qubit gate represented by an edge in the interaction graph has the 
    same probability of getting added to the random circuit. If only a subset of edge probabilities are set, 
    `ValueError` will be raised.

    Arguments accepted by the function are
    :code:`interaction_graph` Takes in the interaction graph, which is a graph G=(V, E) where V are the qubits 
    in the circuit, and, E is the set of two-qubit gate interactions between two particular qubits in the circuit.
    :code:`min_2q_gate_per_edge` Minimum number of times every qubit-pair must be used.
    :code:`max_operands` Takes the maximum number of operands a gate should have. (Possible values are 1 or 2)
    (default 2) (optional)
    :code:`measure` Should the circuit have measure instructions at the end. (True or False) (default False) (optional)
    :code:`conditional` Should the circuit have conditional operations. (True or False) (default False) (optional)
    :code:`reset` Should the circuit have reset instruction (True or False) (default False) (optional)
    :code:`seed` Seed for the random number generator. (optional)
    :code:`insert_1q_oper` Should the circuit have 1Q operations. (True or False) (default True) (optional)
    :code:`prob_conditional` A float value less than 1.0, this is used to control the occurence of conditionals 
    in the circuit. (default 0.1) (optional)
    :code:`prob_reset` A float value less than 1.0, this is used to control the occurence of resets. 
    (default 0.1) (optional)

    This is an example where 'cp_map' is a list of edges for a "Directed Heavy Hex Graph" with some arbitrary weights.

    .. code-block:: python

      from qiskit.circuit.random.utils import random_circuit_from_graph
      import rustworkx as rx
      pydi_graph = rx.PyDiGraph()
      n_q = 19
      pydi_graph.add_nodes_from(range(n_q))
      cp_map = [(0, 13, 12),
          (1, 13, 42),
          (1, 14, 53),
          (2, 14, 23),
          (3, 15, 13),
          (4, 15, 21),
          (4, 16, 15),
          (5, 16, 34),
          (6, 17, 25),
          (7, 17, 23),
          (7, 18, 19),
          (8, 18, 29),
          (0, 9, 20),
          (3, 9, 11),
          (5, 12, 39),
          (8, 12, 29),
          (10, 14, 27),
          (10, 16, 16),
          (11, 15, 18),
          (11, 17, 33)]
      pydi_graph.add_edges_from(cp_map)
      qc = random_circuit_from_graph(interaction_graph = pydi_graph, 
                                    min_2q_gate_per_edge = 1, 
                                    max_operands = 2, 
                                    measure = True, 
                                    conditional = True, 
                                    reset = True, 
                                    seed = 0, 
                                    insert_1q_oper = True, 
                                    prob_conditional = 0.21,
                                    prob_reset = 0.1)
      qc.draw(output='mpl', scale = 0.75)


